//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxEXEC : uint
    {
        wxEXEC_ASYNC = 0,
        wxEXEC_SYNC = 1,
        wxEXEC_SHOW_CONSOLE = 2,
        wxEXEC_NOHIDE = 2,
        wxEXEC_MAKE_GROUP_LEADER = 4,
        wxEXEC_NODISABLE = 8,
        wxEXEC_NOEVENTS = 16,
        wxEXEC_HIDE_CONSOLE = 32,
        wxEXEC_BLOCK = 17
    }

    public enum wxSignal : uint
    {
        wxSIGNONE = 0,
        wxSIGHUP = 1,
        wxSIGINT = 2,
        wxSIGQUIT = 3,
        wxSIGILL = 4,
        wxSIGTRAP = 5,
        wxSIGABRT = 6,
        wxSIGIOT = 6,
        wxSIGEMT = 7,
        wxSIGFPE = 8,
        wxSIGKILL = 9,
        wxSIGBUS = 10,
        wxSIGSEGV = 11,
        wxSIGSYS = 12,
        wxSIGPIPE = 13,
        wxSIGALRM = 14,
        wxSIGTERM = 15
    }

    public enum wxKillError : uint
    {
        wxKILL_OK = 0,
        wxKILL_BAD_SIGNAL = 1,
        wxKILL_ACCESS_DENIED = 2,
        wxKILL_NO_PROCESS = 3,
        wxKILL_ERROR = 4
    }

    public enum wxKillFlags : uint
    {
        wxKILL_NOCHILDREN = 0,
        wxKILL_CHILDREN = 1
    }

    [Flags]
    public enum wxShutdownFlags : uint
    {
        wxSHUTDOWN_FORCE = 1,
        wxSHUTDOWN_POWEROFF = 2,
        wxSHUTDOWN_REBOOT = 4,
        wxSHUTDOWN_LOGOFF = 8
    }

    public enum wxBROWSER_N : uint
    {
        wxBROWSER_NEW_WINDOW = 0x1,
        wxBROWSER_NOBUSYCURSOR = 0x2
    }

    public enum wxStrip : uint
    {
        wxStrip_Mnemonics = 1,
        wxStrip_Accel = 2,
        wxStrip_All = 3
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int wxSortCallback(global::System.IntPtr pItem1, global::System.IntPtr pItem2, global::System.IntPtr user_data);

    public unsafe partial class wxPlatform : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int m_longValue;

            [FieldOffset(4)]
            public double m_doubleValue;

            [FieldOffset(12)]
            public wxString.Internal m_stringValue;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatformC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatformC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr platform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatformC2Ei")]
            internal static extern void ctor_2(global::System.IntPtr instance, int defValue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatformC2ERK8wxString")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr defValue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatformC2Ed")]
            internal static extern void ctor_5(global::System.IntPtr instance, double defValue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatformD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform4CopyERKS_")]
            internal static extern void Copy_0(global::System.IntPtr instance, global::System.IntPtr platform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform2IfEil")]
            internal static extern void If_0(global::System.IntPtr @return, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform5IfNotEil")]
            internal static extern void IfNot_0(global::System.IntPtr @return, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform6ElseIfEil")]
            internal static extern global::System.IntPtr ElseIf_0(global::System.IntPtr instance, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform9ElseIfNotEil")]
            internal static extern global::System.IntPtr ElseIfNot_0(global::System.IntPtr instance, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform4ElseEl")]
            internal static extern global::System.IntPtr Else_0(global::System.IntPtr instance, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform2IfEii")]
            internal static extern void If1_0(global::System.IntPtr @return, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform5IfNotEii")]
            internal static extern void IfNot1_0(global::System.IntPtr @return, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform6ElseIfEii")]
            internal static extern global::System.IntPtr ElseIf1_0(global::System.IntPtr instance, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform9ElseIfNotEii")]
            internal static extern global::System.IntPtr ElseIfNot1_0(global::System.IntPtr instance, int platform, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform4ElseEi")]
            internal static extern global::System.IntPtr Else1_0(global::System.IntPtr instance, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform2IfEid")]
            internal static extern void If_1(global::System.IntPtr @return, int platform, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform5IfNotEid")]
            internal static extern void IfNot_1(global::System.IntPtr @return, int platform, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform6ElseIfEid")]
            internal static extern global::System.IntPtr ElseIf_1(global::System.IntPtr instance, int platform, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform9ElseIfNotEid")]
            internal static extern global::System.IntPtr ElseIfNot_1(global::System.IntPtr instance, int platform, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform4ElseEd")]
            internal static extern global::System.IntPtr Else_1(global::System.IntPtr instance, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform2IfEiRK8wxString")]
            internal static extern void If_2(global::System.IntPtr @return, int platform, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform5IfNotEiRK8wxString")]
            internal static extern void IfNot_2(global::System.IntPtr @return, int platform, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform6ElseIfEiRK8wxString")]
            internal static extern global::System.IntPtr ElseIf_2(global::System.IntPtr instance, int platform, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform9ElseIfNotEiRK8wxString")]
            internal static extern global::System.IntPtr ElseIfNot_2(global::System.IntPtr instance, int platform, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform4ElseERK8wxString")]
            internal static extern global::System.IntPtr Else_2(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPlatform10GetIntegerEv")]
            internal static extern int GetInteger_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPlatform9GetStringEv")]
            internal static extern global::System.IntPtr GetString_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPlatform9GetDoubleEv")]
            internal static extern double GetDouble_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPlatformcviEv")]
            internal static extern int OperatorConversion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPlatformcvlEv")]
            internal static extern int OperatorConversion_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPlatformcvdEv")]
            internal static extern double OperatorConversion_2(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPlatformcvRK8wxStringEv")]
            internal static extern global::System.IntPtr OperatorConversion_3(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform11AddPlatformEi")]
            internal static extern void AddPlatform_0(int platform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform2IsEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Is_0(int platform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPlatform14ClearPlatformsEv")]
            internal static extern void ClearPlatforms_0();
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPlatform> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPlatform>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPlatform __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPlatform(native.ToPointer(), skipVTables);
        }

        public static wxPlatform __CreateInstance(wxPlatform.Internal native, bool skipVTables = false)
        {
            return new wxPlatform(native, skipVTables);
        }

        private static void* __CopyValue(wxPlatform.Internal native)
        {
            var ret = Marshal.AllocHGlobal(32);
            wxPlatform.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxPlatform(wxPlatform.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPlatform(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPlatform()
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxPlatform(wxPlatform platform)
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(platform, null))
                throw new global::System.ArgumentNullException("platform", "Cannot be null because it is a C++ reference (&).");
            var arg0 = platform.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxPlatform(int defValue)
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_2((__Instance + __PointerAdjustment), defValue);
        }

        public wxPlatform(wxString defValue)
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(defValue, null))
                throw new global::System.ArgumentNullException("defValue", "Cannot be null because it is a C++ reference (&).");
            var arg0 = defValue.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0);
        }

        public wxPlatform(double defValue)
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_5((__Instance + __PointerAdjustment), defValue);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPlatform __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Copy(wxPlatform platform)
        {
            if (ReferenceEquals(platform, null))
                throw new global::System.ArgumentNullException("platform", "Cannot be null because it is a C++ reference (&).");
            var arg0 = platform.__Instance;
            Internal.Copy_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxPlatform ElseIf(int platform, int value)
        {
            var __ret = Internal.ElseIf_0((__Instance + __PointerAdjustment), platform, value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform ElseIfNot(int platform, int value)
        {
            var __ret = Internal.ElseIfNot_0((__Instance + __PointerAdjustment), platform, value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform Else(int value)
        {
            var __ret = Internal.Else_0((__Instance + __PointerAdjustment), value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform ElseIf1(int platform, int value)
        {
            var __ret = Internal.ElseIf1_0((__Instance + __PointerAdjustment), platform, value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform ElseIfNot1(int platform, int value)
        {
            var __ret = Internal.ElseIfNot1_0((__Instance + __PointerAdjustment), platform, value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform Else1(int value)
        {
            var __ret = Internal.Else1_0((__Instance + __PointerAdjustment), value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform ElseIf(int platform, double value)
        {
            var __ret = Internal.ElseIf_1((__Instance + __PointerAdjustment), platform, value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform ElseIfNot(int platform, double value)
        {
            var __ret = Internal.ElseIfNot_1((__Instance + __PointerAdjustment), platform, value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform Else(double value)
        {
            var __ret = Internal.Else_1((__Instance + __PointerAdjustment), value);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform ElseIf(int platform, wxString value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg1 = value.__Instance;
            var __ret = Internal.ElseIf_2((__Instance + __PointerAdjustment), platform, arg1);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform ElseIfNot(int platform, wxString value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg1 = value.__Instance;
            var __ret = Internal.ElseIfNot_2((__Instance + __PointerAdjustment), platform, arg1);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public wxPlatform Else(wxString value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.Else_2((__Instance + __PointerAdjustment), arg0);
            wxPlatform __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatform.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatform) wxPlatform.NativeToManagedMap[__ret];
            else __result0 = wxPlatform.__CreateInstance(__ret);
            return __result0;
        }

        public int GetInteger()
        {
            var __ret = Internal.GetInteger_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetString()
        {
            var __ret = Internal.GetString_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public double GetDouble()
        {
            var __ret = Internal.GetDouble_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static implicit operator int(wxPlatform __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_0(arg0);
            return __ret;
        }

        public static implicit operator int(wxPlatform __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_1(arg0);
            return __ret;
        }

        public static implicit operator double(wxPlatform __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_2(arg0);
            return __ret;
        }

        public static implicit operator wxString(wxPlatform __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_3(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public static wxPlatform If(int platform, int value)
        {
            var __ret = new wxPlatform.Internal();
            Internal.If_0(new IntPtr(&__ret), platform, value);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static wxPlatform IfNot(int platform, int value)
        {
            var __ret = new wxPlatform.Internal();
            Internal.IfNot_0(new IntPtr(&__ret), platform, value);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static wxPlatform If1(int platform, int value)
        {
            var __ret = new wxPlatform.Internal();
            Internal.If1_0(new IntPtr(&__ret), platform, value);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static wxPlatform IfNot1(int platform, int value)
        {
            var __ret = new wxPlatform.Internal();
            Internal.IfNot1_0(new IntPtr(&__ret), platform, value);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static wxPlatform If(int platform, double value)
        {
            var __ret = new wxPlatform.Internal();
            Internal.If_1(new IntPtr(&__ret), platform, value);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static wxPlatform IfNot(int platform, double value)
        {
            var __ret = new wxPlatform.Internal();
            Internal.IfNot_1(new IntPtr(&__ret), platform, value);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static wxPlatform If(int platform, wxString value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg1 = value.__Instance;
            var __ret = new wxPlatform.Internal();
            Internal.If_2(new IntPtr(&__ret), platform, arg1);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static wxPlatform IfNot(int platform, wxString value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg1 = value.__Instance;
            var __ret = new wxPlatform.Internal();
            Internal.IfNot_2(new IntPtr(&__ret), platform, arg1);
            return wxPlatform.__CreateInstance(__ret);
        }

        public static void AddPlatform(int platform)
        {
            Internal.AddPlatform_0(platform);
        }

        public static bool Is(int platform)
        {
            var __ret = Internal.Is_0(platform);
            return __ret;
        }

        public static void ClearPlatforms()
        {
            Internal.ClearPlatforms_0();
        }
    }

    public unsafe partial class wxExecuteEnv : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal cwd;

            [FieldOffset(20)]
            public wxStringToStringHashMap.Internal env;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxExecuteEnvC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxExecuteEnvC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxExecuteEnvD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxExecuteEnv> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxExecuteEnv>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxExecuteEnv __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxExecuteEnv(native.ToPointer(), skipVTables);
        }

        public static wxExecuteEnv __CreateInstance(wxExecuteEnv.Internal native, bool skipVTables = false)
        {
            return new wxExecuteEnv(native, skipVTables);
        }

        private static void* __CopyValue(wxExecuteEnv.Internal native)
        {
            var ret = Marshal.AllocHGlobal(36);
            wxExecuteEnv.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxExecuteEnv(wxExecuteEnv.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxExecuteEnv(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxExecuteEnv()
        {
            __Instance = Marshal.AllocHGlobal(36);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
        }

        public wxExecuteEnv(wxExecuteEnv _0)
        {
            __Instance = Marshal.AllocHGlobal(36);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxExecuteEnv __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString cwd
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->cwd);
            }

            set
            {
                ((Internal*) __Instance)->cwd = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public wxStringToStringHashMap env
        {
            get
            {
                return wxStringToStringHashMap.__CreateInstance(((Internal*) __Instance)->env);
            }

            set
            {
                ((Internal*) __Instance)->env = ReferenceEquals(value, null) ? new wxStringToStringHashMap.Internal() : *(wxStringToStringHashMap.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxWindowDisabler : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_modalEventLoop;

            [FieldOffset(4)]
            public global::System.IntPtr m_winDisabled;

            [FieldOffset(8)]
            public byte m_disabled;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxWindowDisablerC2Eb")]
            internal static extern void ctor_0(global::System.IntPtr instance, bool disable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxWindowDisablerD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxWindowDisabler> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxWindowDisabler>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxWindowDisabler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxWindowDisabler(native.ToPointer(), skipVTables);
        }

        public static wxWindowDisabler __CreateInstance(wxWindowDisabler.Internal native, bool skipVTables = false)
        {
            return new wxWindowDisabler(native, skipVTables);
        }

        private static void* __CopyValue(wxWindowDisabler.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            *(wxWindowDisabler.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxWindowDisabler(wxWindowDisabler.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxWindowDisabler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxWindowDisabler(bool disable)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), disable);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxWindowDisabler __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxBusyCursor : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxBusyCursorC2EPK8wxCursor")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr cursor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxBusyCursorC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxBusyCursorD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxBusyCursor15GetStoredCursorEv")]
            internal static extern global::System.IntPtr GetStoredCursor_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxBusyCursor13GetBusyCursorEv")]
            internal static extern void GetBusyCursor_0(global::System.IntPtr @return);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBusyCursor> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBusyCursor>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBusyCursor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBusyCursor(native.ToPointer(), skipVTables);
        }

        public static wxBusyCursor __CreateInstance(wxBusyCursor.Internal native, bool skipVTables = false)
        {
            return new wxBusyCursor(native, skipVTables);
        }

        private static void* __CopyValue(wxBusyCursor.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxBusyCursor.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxBusyCursor(wxBusyCursor.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBusyCursor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBusyCursor(wxCursor cursor)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(cursor, null) ? global::System.IntPtr.Zero : cursor.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxBusyCursor(wxBusyCursor _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxBusyCursor.Internal*) __Instance) = *((wxBusyCursor.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBusyCursor __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static wxCursor GetStoredCursor()
        {
            var __ret = Internal.GetStoredCursor_0();
            wxCursor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxCursor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxCursor) wxCursor.NativeToManagedMap[__ret];
            else wxCursor.NativeToManagedMap[__ret] = __result0 = (wxCursor) wxCursor.__CreateInstance(__ret);
            return __result0;
        }

        public static wxCursor GetBusyCursor()
        {
            var __ret = new wxCursor.Internal();
            Internal.GetBusyCursor_0(new IntPtr(&__ret));
            return wxCursor.__CreateInstance(__ret);
        }
    }

    public unsafe partial class utils
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxBellv")]
            internal static extern void wxBell_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z23wxGetLibraryVersionInfov")]
            internal static extern void wxGetLibraryVersionInfo_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxGetOsDescriptionv")]
            internal static extern void wxGetOsDescription_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxGetOsVersionPiS_")]
            internal static extern wxOperatingSystemId wxGetOsVersion_0(int* majorVsn, int* minorVsn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxCheckOsVersionii")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxCheckOsVersion_0(int majorVsn, int minorVsn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z24wxIsPlatformLittleEndianv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsPlatformLittleEndian_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxIsPlatform64Bitv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsPlatform64Bit_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z5wxNowv")]
            internal static extern void wxNow_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxGetInstallPrefixv")]
            internal static extern global::System.IntPtr wxGetInstallPrefix_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxGetDataDirv")]
            internal static extern void wxGetDataDir_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetKeyState9wxKeyCode")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetKeyState_0(wxKeyCode key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z25wxSetDetectableAutoRepeatb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxSetDetectableAutoRepeat_0(bool flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxGetMouseStatev")]
            internal static extern void wxGetMouseState_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxPlatformIsi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxPlatformIs_0(int platform);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxRegisterIdi")]
            internal static extern void wxRegisterId_0(int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxGetCurrentIdv")]
            internal static extern int wxGetCurrentId_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxNewIdv")]
            internal static extern int wxNewId_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxHexToDecRK8wxString")]
            internal static extern int wxHexToDec_0(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxHexToDecPKc")]
            internal static extern int wxHexToDec_1(global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxDecToHexiPw")]
            internal static extern void wxDecToHex_0(int dec, char* buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxDecToHexiPcS_")]
            internal static extern void wxDecToHex_1(int dec, sbyte* ch1, sbyte* ch2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxDecToHexi")]
            internal static extern void wxDecToHex_2(global::System.IntPtr @return, int dec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z9wxExecuteRK8wxStringR13wxArrayStringiPK12wxExecuteEnv")]
            internal static extern int wxExecute_3(global::System.IntPtr command, global::System.IntPtr output, int flags, global::System.IntPtr env);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z9wxExecuteRK8wxStringR13wxArrayStringS3_iPK12wxExecuteEnv")]
            internal static extern int wxExecute_4(global::System.IntPtr command, global::System.IntPtr output, global::System.IntPtr error, int flags, global::System.IntPtr env);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxShutdowni")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxShutdown_0(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxKilll8wxSignalP11wxKillErrori")]
            internal static extern int wxKill_0(int pid, wxSignal sig, wxKillError* rc, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxShellRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxShell_0(global::System.IntPtr command);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxShellRK8wxStringR13wxArrayString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxShell_1(global::System.IntPtr command, global::System.IntPtr output);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxSleepi")]
            internal static extern void wxSleep_0(int nSecs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxMilliSleepm")]
            internal static extern void wxMilliSleep_0(uint milliseconds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxMicroSleepm")]
            internal static extern void wxMicroSleep_0(uint microseconds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxGetProcessIdv")]
            internal static extern uint wxGetProcessId_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxGetFreeMemoryv")]
            internal static extern wxLongLongNative.Internal wxGetFreeMemory_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z23wxHandleFatalExceptionsb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxHandleFatalExceptions_0(bool doit);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z8wxGetEnvRK8wxStringPS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetEnv_0(global::System.IntPtr var, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z8wxSetEnvRK8wxStringS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxSetEnv_0(global::System.IntPtr var, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxUnsetEnvRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxUnsetEnv_0(global::System.IntPtr var);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxGetEnvMapP23wxStringToStringHashMap")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetEnvMap_0(global::System.IntPtr map);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxGetEmailAddressPwi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetEmailAddress_0(char* buf, int maxSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxGetEmailAddressv")]
            internal static extern void wxGetEmailAddress_1(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetHostNamePwi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetHostName_0(char* buf, int maxSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetHostNamev")]
            internal static extern void wxGetHostName_1(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxGetFullHostNamev")]
            internal static extern void wxGetFullHostName_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxGetFullHostNamePwi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetFullHostName_1(char* buf, int maxSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxGetUserIdPwi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetUserId_0(char* buf, int maxSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxGetUserIdv")]
            internal static extern void wxGetUserId_1(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetUserNamePwi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetUserName_0(char* buf, int maxSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetUserNamev")]
            internal static extern void wxGetUserName_1(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxGetHomeDirv")]
            internal static extern void wxGetHomeDir_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxGetHomeDirP8wxString")]
            internal static extern global::System.IntPtr wxGetHomeDir_1(global::System.IntPtr pstr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetUserHomeRK8wxString")]
            internal static extern void wxGetUserHome_0(global::System.IntPtr @return, global::System.IntPtr user);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxGetDiskSpaceRK8wxStringP16wxLongLongNativeS3_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxGetDiskSpace_0(global::System.IntPtr path, global::System.IntPtr pTotal, global::System.IntPtr pFree);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z22wxLaunchDefaultBrowserRK8wxStringi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxLaunchDefaultBrowser_0(global::System.IntPtr url, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z26wxLaunchDefaultApplicationRK8wxStringi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxLaunchDefaultApplication_0(global::System.IntPtr path, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxStripMenuCodesRK8wxStringi")]
            internal static extern void wxStripMenuCodes_0(global::System.IntPtr @return, global::System.IntPtr str, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z23wxEnableTopLevelWindowsb")]
            internal static extern void wxEnableTopLevelWindows_0(bool enable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxFlushEventsv")]
            internal static extern void wxFlushEvents_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxBeginBusyCursorPK8wxCursor")]
            internal static extern void wxBeginBusyCursor_0(global::System.IntPtr cursor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxEndBusyCursorv")]
            internal static extern void wxEndBusyCursor_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z8wxIsBusyv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsBusy_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxGetMousePositionPiS_")]
            internal static extern void wxGetMousePosition_0(int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxYieldv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxYield_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxYieldIfNeededv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxYieldIfNeeded_0();
        }

        public static void wxBell()
        {
            Internal.wxBell_0();
        }

        public static wxVersionInfo wxGetLibraryVersionInfo()
        {
            var __ret = new wxVersionInfo.Internal();
            Internal.wxGetLibraryVersionInfo_0(new IntPtr(&__ret));
            return wxVersionInfo.__CreateInstance(__ret);
        }

        public static wxString wxGetOsDescription()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetOsDescription_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static wxOperatingSystemId wxGetOsVersion(ref int majorVsn, ref int minorVsn)
        {
            fixed (int* __refParamPtr0 = &majorVsn)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &minorVsn)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.wxGetOsVersion_0(arg0, arg1);
                    return __ret;
                }
            }
        }

        public static bool wxCheckOsVersion(int majorVsn, int minorVsn)
        {
            var __ret = Internal.wxCheckOsVersion_0(majorVsn, minorVsn);
            return __ret;
        }

        public static bool wxIsPlatformLittleEndian()
        {
            var __ret = Internal.wxIsPlatformLittleEndian_0();
            return __ret;
        }

        public static bool wxIsPlatform64Bit()
        {
            var __ret = Internal.wxIsPlatform64Bit_0();
            return __ret;
        }

        public static wxString wxNow()
        {
            var __ret = new wxString.Internal();
            Internal.wxNow_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static string wxGetInstallPrefix()
        {
            var __ret = Internal.wxGetInstallPrefix_0();
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public static wxString wxGetDataDir()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetDataDir_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static bool wxGetKeyState(wxKeyCode key)
        {
            var arg0 = key;
            var __ret = Internal.wxGetKeyState_0(arg0);
            return __ret;
        }

        public static bool wxSetDetectableAutoRepeat(bool flag)
        {
            var __ret = Internal.wxSetDetectableAutoRepeat_0(flag);
            return __ret;
        }

        public static wxMouseState wxGetMouseState()
        {
            var __ret = new wxMouseState.Internal();
            Internal.wxGetMouseState_0(new IntPtr(&__ret));
            return wxMouseState.__CreateInstance(__ret);
        }

        /// <summary>
        /// <para>Function for testing current platform</para>
        /// </summary>
        /// 
        public static bool wxPlatformIs(int platform)
        {
            var __ret = Internal.wxPlatformIs_0(platform);
            return __ret;
        }

        public static void wxRegisterId(int id)
        {
            Internal.wxRegisterId_0(id);
        }

        public static int wxGetCurrentId()
        {
            var __ret = Internal.wxGetCurrentId_0();
            return __ret;
        }

        public static int wxNewId()
        {
            var __ret = Internal.wxNewId_0();
            return __ret;
        }

        public static int wxHexToDec(wxString buf)
        {
            if (ReferenceEquals(buf, null))
                throw new global::System.ArgumentNullException("buf", "Cannot be null because it is a C++ reference (&).");
            var arg0 = buf.__Instance;
            var __ret = Internal.wxHexToDec_0(arg0);
            return __ret;
        }

        public static int wxHexToDec(string buf)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(buf);
            var __ret = Internal.wxHexToDec_1(arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static void wxDecToHex(int dec, char* buf)
        {
            var arg1 = buf;
            Internal.wxDecToHex_0(dec, arg1);
        }

        public static void wxDecToHex(int dec, sbyte* ch1, sbyte* ch2)
        {
            var arg1 = ch1;
            var arg2 = ch2;
            Internal.wxDecToHex_1(dec, arg1, arg2);
        }

        public static wxString wxDecToHex(int dec)
        {
            var __ret = new wxString.Internal();
            Internal.wxDecToHex_2(new IntPtr(&__ret), dec);
            return wxString.__CreateInstance(__ret);
        }

        public static int wxExecute(wxString command, wxArrayString output, int flags, wxExecuteEnv env)
        {
            if (ReferenceEquals(command, null))
                throw new global::System.ArgumentNullException("command", "Cannot be null because it is a C++ reference (&).");
            var arg0 = command.__Instance;
            if (ReferenceEquals(output, null))
                throw new global::System.ArgumentNullException("output", "Cannot be null because it is a C++ reference (&).");
            var arg1 = output.__Instance;
            var arg3 = ReferenceEquals(env, null) ? global::System.IntPtr.Zero : env.__Instance;
            var __ret = Internal.wxExecute_3(arg0, arg1, flags, arg3);
            return __ret;
        }

        public static int wxExecute(wxString command, wxArrayString output, wxArrayString error, int flags, wxExecuteEnv env)
        {
            if (ReferenceEquals(command, null))
                throw new global::System.ArgumentNullException("command", "Cannot be null because it is a C++ reference (&).");
            var arg0 = command.__Instance;
            if (ReferenceEquals(output, null))
                throw new global::System.ArgumentNullException("output", "Cannot be null because it is a C++ reference (&).");
            var arg1 = output.__Instance;
            if (ReferenceEquals(error, null))
                throw new global::System.ArgumentNullException("error", "Cannot be null because it is a C++ reference (&).");
            var arg2 = error.__Instance;
            var arg4 = ReferenceEquals(env, null) ? global::System.IntPtr.Zero : env.__Instance;
            var __ret = Internal.wxExecute_4(arg0, arg1, arg2, flags, arg4);
            return __ret;
        }

        public static bool wxShutdown(int flags)
        {
            var __ret = Internal.wxShutdown_0(flags);
            return __ret;
        }

        public static int wxKill(int pid, wxSignal sig, wxKillError* rc, int flags)
        {
            var arg1 = sig;
            var arg2 = rc;
            var __ret = Internal.wxKill_0(pid, arg1, arg2, flags);
            return __ret;
        }

        public static bool wxShell(wxString command)
        {
            if (ReferenceEquals(command, null))
                throw new global::System.ArgumentNullException("command", "Cannot be null because it is a C++ reference (&).");
            var arg0 = command.__Instance;
            var __ret = Internal.wxShell_0(arg0);
            return __ret;
        }

        public static bool wxShell(wxString command, wxArrayString output)
        {
            if (ReferenceEquals(command, null))
                throw new global::System.ArgumentNullException("command", "Cannot be null because it is a C++ reference (&).");
            var arg0 = command.__Instance;
            if (ReferenceEquals(output, null))
                throw new global::System.ArgumentNullException("output", "Cannot be null because it is a C++ reference (&).");
            var arg1 = output.__Instance;
            var __ret = Internal.wxShell_1(arg0, arg1);
            return __ret;
        }

        public static void wxSleep(int nSecs)
        {
            Internal.wxSleep_0(nSecs);
        }

        public static void wxMilliSleep(uint milliseconds)
        {
            Internal.wxMilliSleep_0(milliseconds);
        }

        public static void wxMicroSleep(uint microseconds)
        {
            Internal.wxMicroSleep_0(microseconds);
        }

        public static uint wxGetProcessId()
        {
            var __ret = Internal.wxGetProcessId_0();
            return __ret;
        }

        public static wxLongLongNative wxGetFreeMemory()
        {
            var __ret = Internal.wxGetFreeMemory_0();
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static bool wxHandleFatalExceptions(bool doit)
        {
            var __ret = Internal.wxHandleFatalExceptions_0(doit);
            return __ret;
        }

        public static bool wxGetEnv(wxString var, wxString value)
        {
            if (ReferenceEquals(var, null))
                throw new global::System.ArgumentNullException("var", "Cannot be null because it is a C++ reference (&).");
            var arg0 = var.__Instance;
            var arg1 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = Internal.wxGetEnv_0(arg0, arg1);
            return __ret;
        }

        public static bool wxSetEnv(wxString var, wxString value)
        {
            if (ReferenceEquals(var, null))
                throw new global::System.ArgumentNullException("var", "Cannot be null because it is a C++ reference (&).");
            var arg0 = var.__Instance;
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg1 = value.__Instance;
            var __ret = Internal.wxSetEnv_0(arg0, arg1);
            return __ret;
        }

        public static bool wxUnsetEnv(wxString var)
        {
            if (ReferenceEquals(var, null))
                throw new global::System.ArgumentNullException("var", "Cannot be null because it is a C++ reference (&).");
            var arg0 = var.__Instance;
            var __ret = Internal.wxUnsetEnv_0(arg0);
            return __ret;
        }

        public static bool wxGetEnvMap(wxStringToStringHashMap map)
        {
            var arg0 = ReferenceEquals(map, null) ? global::System.IntPtr.Zero : map.__Instance;
            var __ret = Internal.wxGetEnvMap_0(arg0);
            return __ret;
        }

        public static bool wxGetEmailAddress(char* buf, int maxSize)
        {
            var arg0 = buf;
            var __ret = Internal.wxGetEmailAddress_0(arg0, maxSize);
            return __ret;
        }

        public static wxString wxGetEmailAddress()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetEmailAddress_1(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static bool wxGetHostName(char* buf, int maxSize)
        {
            var arg0 = buf;
            var __ret = Internal.wxGetHostName_0(arg0, maxSize);
            return __ret;
        }

        public static wxString wxGetHostName()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetHostName_1(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static wxString wxGetFullHostName()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetFullHostName_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static bool wxGetFullHostName(char* buf, int maxSize)
        {
            var arg0 = buf;
            var __ret = Internal.wxGetFullHostName_1(arg0, maxSize);
            return __ret;
        }

        public static bool wxGetUserId(char* buf, int maxSize)
        {
            var arg0 = buf;
            var __ret = Internal.wxGetUserId_0(arg0, maxSize);
            return __ret;
        }

        public static wxString wxGetUserId()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetUserId_1(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static bool wxGetUserName(char* buf, int maxSize)
        {
            var arg0 = buf;
            var __ret = Internal.wxGetUserName_0(arg0, maxSize);
            return __ret;
        }

        public static wxString wxGetUserName()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetUserName_1(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static wxString wxGetHomeDir()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetHomeDir_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static string wxGetHomeDir(wxString pstr)
        {
            var arg0 = ReferenceEquals(pstr, null) ? global::System.IntPtr.Zero : pstr.__Instance;
            var __ret = Internal.wxGetHomeDir_1(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public static wxString wxGetUserHome(wxString user)
        {
            if (ReferenceEquals(user, null))
                throw new global::System.ArgumentNullException("user", "Cannot be null because it is a C++ reference (&).");
            var arg0 = user.__Instance;
            var __ret = new wxString.Internal();
            Internal.wxGetUserHome_0(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static bool wxGetDiskSpace(wxString path, wxLongLongNative pTotal, wxLongLongNative pFree)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var arg1 = ReferenceEquals(pTotal, null) ? global::System.IntPtr.Zero : pTotal.__Instance;
            var arg2 = ReferenceEquals(pFree, null) ? global::System.IntPtr.Zero : pFree.__Instance;
            var __ret = Internal.wxGetDiskSpace_0(arg0, arg1, arg2);
            return __ret;
        }

        public static bool wxLaunchDefaultBrowser(wxString url, int flags)
        {
            if (ReferenceEquals(url, null))
                throw new global::System.ArgumentNullException("url", "Cannot be null because it is a C++ reference (&).");
            var arg0 = url.__Instance;
            var __ret = Internal.wxLaunchDefaultBrowser_0(arg0, flags);
            return __ret;
        }

        public static bool wxLaunchDefaultApplication(wxString path, int flags)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxLaunchDefaultApplication_0(arg0, flags);
            return __ret;
        }

        public static wxString wxStripMenuCodes(wxString str, int flags)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = new wxString.Internal();
            Internal.wxStripMenuCodes_0(new IntPtr(&__ret), arg0, flags);
            return wxString.__CreateInstance(__ret);
        }

        public static void wxEnableTopLevelWindows(bool enable)
        {
            Internal.wxEnableTopLevelWindows_0(enable);
        }

        public static void wxFlushEvents()
        {
            Internal.wxFlushEvents_0();
        }

        public static void wxBeginBusyCursor(wxCursor cursor)
        {
            var arg0 = ReferenceEquals(cursor, null) ? global::System.IntPtr.Zero : cursor.__Instance;
            Internal.wxBeginBusyCursor_0(arg0);
        }

        public static void wxEndBusyCursor()
        {
            Internal.wxEndBusyCursor_0();
        }

        public static bool wxIsBusy()
        {
            var __ret = Internal.wxIsBusy_0();
            return __ret;
        }

        public static void wxGetMousePosition(ref int x, ref int y)
        {
            fixed (int* __refParamPtr0 = &x)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &y)
                {
                    var arg1 = __refParamPtr1;
                    Internal.wxGetMousePosition_0(arg0, arg1);
                }
            }
        }

        public static bool wxYield()
        {
            var __ret = Internal.wxYield_0();
            return __ret;
        }

        public static bool wxYieldIfNeeded()
        {
            var __ret = Internal.wxYieldIfNeeded_0();
            return __ret;
        }
    }
}
