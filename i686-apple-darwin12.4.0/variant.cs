//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int wxSortFuncFor_wxVariantList(global::System.IntPtr _0, global::System.IntPtr _1);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr wxVariantDataFactory(global::System.IntPtr any);

    public unsafe partial class wxAnyToVariantRegistrationImpl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_factory;
        }
    }

    public unsafe abstract partial class wxVariantData : wxRefCounter, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public int m_count;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantDataC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantDataC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantDataD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public static new wxVariantData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxVariantDataInternal(native.ToPointer(), skipVTables);
        }

        public static wxVariantData __CreateInstance(wxVariantData.Internal native, bool skipVTables = false)
        {
            return new wxVariantDataInternal(native, skipVTables);
        }

        protected wxVariantData(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxVariantData()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxVariantData");
        }

        protected override void Dispose(bool disposing)
        {
            wxRefCounter __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract bool Eq(wxVariantData data);

        public virtual bool Write(wxString _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___Write_1Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            var __ret = ___Write_1Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public virtual bool Read(wxString _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___Read_1Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            var __ret = ___Read_1Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public abstract wxString GetType();

        public virtual wxClassInfo GetValueClassInfo()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___GetValueClassInfo_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetValueClassInfo_0Delegate((__Instance + __PointerAdjustment));
            wxClassInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClassInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClassInfo) wxClassInfo.NativeToManagedMap[__ret];
            else __result0 = wxClassInfo.__CreateInstance(__ret);
            return __result0;
        }

        public virtual wxVariantData Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxVariantData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxVariantData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxVariantData) wxVariantData.NativeToManagedMap[__ret];
            else wxVariantData.NativeToManagedMap[__ret] = __result0 = (wxVariantData) wxVariantData.__CreateInstance(__ret);
            return __result0;
        }

        public virtual bool GetAsAny(wxAny _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___GetAsAny_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = ___GetAsAny_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        #region Virtual table interop

        // virtual ~wxVariantData()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // bool Eq(wxVariantData& data) const = 0
        private static Delegates.Func_bool_IntPtr_IntPtr _Eq_0DelegateInstance;

        private static bool _Eq_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxVariantData __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxVariantData.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxVariantData) wxVariantData.NativeToManagedMap[data];
            else __result0 = (wxVariantData) wxVariantData.__CreateInstance(data, skipVTables: true);
            var __ret = __target.Eq(__result0);
            return __ret;
        }

        // bool Write(wxString& WXUNUSED(str)) const
        private static Delegates.Func_bool_IntPtr_IntPtr _Write_1DelegateInstance;

        private static bool _Write_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxString) wxString.NativeToManagedMap[_0];
            else __result0 = wxString.__CreateInstance(_0);
            var __ret = __target.Write(__result0);
            return __ret;
        }

        // bool Read(wxString& WXUNUSED(str))
        private static Delegates.Func_bool_IntPtr_IntPtr _Read_1DelegateInstance;

        private static bool _Read_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxString) wxString.NativeToManagedMap[_0];
            else __result0 = wxString.__CreateInstance(_0);
            var __ret = __target.Read(__result0);
            return __ret;
        }

        // wxString GetType() const = 0
        private static Delegates.Action_IntPtr_IntPtr _GetType_0DelegateInstance;

        private static void _GetType_0DelegateHook(global::System.IntPtr @return, global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetType();
            *(wxString.Internal*) @return = ReferenceEquals(__ret, null) ? new wxString.Internal() : *(wxString.Internal*) (__ret.__Instance);
        }

        // wxClassInfo* GetValueClassInfo()
        private static Delegates.Func_IntPtr_IntPtr _GetValueClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetValueClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetValueClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxVariantData* Clone() const
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool GetAsAny(wxAny* WXUNUSED(any)) const
        private static Delegates.Func_bool_IntPtr_IntPtr _GetAsAny_0DelegateInstance;

        private static bool _GetAsAny_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxAny __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxAny.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxAny) wxAny.NativeToManagedMap[_0];
            else __result0 = wxAny.__CreateInstance(_0);
            var __ret = __target.GetAsAny(__result0);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[8];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _Eq_0DelegateInstance += _Eq_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Eq_0DelegateInstance).ToPointer();
                _Write_1DelegateInstance += _Write_1DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Write_1DelegateInstance).ToPointer();
                _Read_1DelegateInstance += _Read_1DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_Read_1DelegateInstance).ToPointer();
                _GetType_0DelegateInstance += _GetType_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetType_0DelegateInstance).ToPointer();
                _GetValueClassInfo_0DelegateInstance += _GetValueClassInfo_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetValueClassInfo_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetAsAny_0DelegateInstance += _GetAsAny_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetAsAny_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(13 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(13 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = _Thunks[2];
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = _Thunks[3];
                    *(void**)(vfptr0 + 28) = _Thunks[4];
                    *(void**)(vfptr0 + 32) = _Thunks[5];
                    *(void**)(vfptr0 + 36) = _Thunks[6];
                    *(void**)(vfptr0 + 40) = _Thunks[7];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxwxVariantListNode : wxNodeBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public wxListKeyValue.Internal m_key;

            [FieldOffset(8)]
            public global::System.IntPtr m_data;

            [FieldOffset(12)]
            public global::System.IntPtr m_next;

            [FieldOffset(16)]
            public global::System.IntPtr m_previous;

            [FieldOffset(20)]
            public global::System.IntPtr m_list;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxwxVariantListNodeC2EP10wxListBasePS_S2_P9wxVariantRK9wxListKey")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr list, global::System.IntPtr previous, global::System.IntPtr next, global::System.IntPtr data, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK19wxwxVariantListNode7GetNextEv")]
            internal static extern global::System.IntPtr GetNext_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK19wxwxVariantListNode11GetPreviousEv")]
            internal static extern global::System.IntPtr GetPrevious_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK19wxwxVariantListNode7GetDataEv")]
            internal static extern global::System.IntPtr GetData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxwxVariantListNode7SetDataEP9wxVariant")]
            internal static extern void SetData_0(global::System.IntPtr instance, global::System.IntPtr data);
        }

        public static new wxwxVariantListNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxwxVariantListNode(native.ToPointer(), skipVTables);
        }

        public static wxwxVariantListNode __CreateInstance(wxwxVariantListNode.Internal native, bool skipVTables = false)
        {
            return new wxwxVariantListNode(native, skipVTables);
        }

        private static void* __CopyValue(wxwxVariantListNode.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            *(wxwxVariantListNode.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxwxVariantListNode(wxwxVariantListNode.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxwxVariantListNode(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxwxVariantListNode(wxListBase list, wxwxVariantListNode previous, wxwxVariantListNode next, wxVariant data, wxListKey key)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(list, null) ? global::System.IntPtr.Zero : list.__Instance;
            var arg1 = ReferenceEquals(previous, null) ? global::System.IntPtr.Zero : previous.__Instance;
            var arg2 = ReferenceEquals(next, null) ? global::System.IntPtr.Zero : next.__Instance;
            var arg3 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg4 = key.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3, arg4);
            SetupVTables(GetType().FullName == "wxSharp.wxwxVariantListNode");
        }

        public wxwxVariantListNode GetNext()
        {
            var __ret = Internal.GetNext_0((__Instance + __PointerAdjustment));
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode GetPrevious()
        {
            var __ret = Internal.GetPrevious_0((__Instance + __PointerAdjustment));
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxVariant GetData()
        {
            var __ret = Internal.GetData_0((__Instance + __PointerAdjustment));
            wxVariant __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxVariant.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxVariant) wxVariant.NativeToManagedMap[__ret];
            else wxVariant.NativeToManagedMap[__ret] = __result0 = (wxVariant) wxVariant.__CreateInstance(__ret);
            return __result0;
        }

        public void SetData(wxVariant data)
        {
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            Internal.SetData_0((__Instance + __PointerAdjustment), arg0);
        }

        protected override void DeleteData()
        {
            base.DeleteData();
        }

        #region Virtual table interop

        // 
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxwxVariantListNode) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // 
        private static Delegates.Action_IntPtr _DeleteData_0DelegateInstance;

        private static void _DeleteData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxwxVariantListNode) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteData();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _DeleteData_0DelegateInstance += _DeleteData_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DeleteData_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxVariantList : wxListBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public uint m_count;

            [FieldOffset(8)]
            public byte m_destroy;

            [FieldOffset(12)]
            public global::System.IntPtr m_nodeFirst;

            [FieldOffset(16)]
            public global::System.IntPtr m_nodeLast;

            [FieldOffset(20)]
            public wxKeyType m_keyType;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantListC2E9wxKeyType")]
            internal static extern void ctor_0(global::System.IntPtr instance, wxKeyType keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantListC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantListC2EmRKP9wxVariant")]
            internal static extern void ctor_3(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantListC2ERKNS_14const_iteratorES2_")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList7GetLastEv")]
            internal static extern global::System.IntPtr GetLast_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6AppendEP9wxVariant")]
            internal static extern global::System.IntPtr Append_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6InsertEP9wxVariant")]
            internal static extern global::System.IntPtr Insert_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6InsertEmP9wxVariant")]
            internal static extern global::System.IntPtr Insert_1(global::System.IntPtr instance, uint pos, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6InsertEP19wxwxVariantListNodeP9wxVariant")]
            internal static extern global::System.IntPtr Insert_2(global::System.IntPtr instance, global::System.IntPtr prev, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6AppendElPv")]
            internal static extern global::System.IntPtr Append_1(global::System.IntPtr instance, int key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6AppendEPKwPv")]
            internal static extern global::System.IntPtr Append_2(global::System.IntPtr instance, global::System.IntPtr key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList10DetachNodeEP19wxwxVariantListNode")]
            internal static extern global::System.IntPtr DetachNode_0(global::System.IntPtr instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList10DeleteNodeEP19wxwxVariantListNode")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool DeleteNode_0(global::System.IntPtr instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList12DeleteObjectEP9wxVariant")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool DeleteObject_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList5EraseEP19wxwxVariantListNode")]
            internal static extern void Erase_0(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList4FindEPK9wxVariant")]
            internal static extern global::System.IntPtr Find_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList6MemberEPK9wxVariant")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Member_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList7IndexOfEP9wxVariant")]
            internal static extern int IndexOf_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr func);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList4SortEPFiPPK9wxVariantS3_E")]
            internal static extern void Sort_1(global::System.IntPtr instance, global::System.IntPtr func);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList5beginEv")]
            internal static extern wxVariantList.iterator.Internal begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList3endEv")]
            internal static extern wxVariantList.iterator.Internal end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6rbeginEv")]
            internal static extern wxVariantList.reverse_iterator.Internal rbegin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList4rendEv")]
            internal static extern wxVariantList.reverse_iterator.Internal rend_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6resizeEmP9wxVariant")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantList5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList5frontEv")]
            internal static extern global::System.IntPtr front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList4backEv")]
            internal static extern global::System.IntPtr back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList10push_frontERKP9wxVariant")]
            internal static extern void push_front_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList9pop_frontEv")]
            internal static extern void pop_front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList9push_backERKP9wxVariant")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6assignENS_14const_iteratorERKS0_")]
            internal static extern void assign_0(global::System.IntPtr instance, wxVariantList.const_iterator.Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6assignEmRKP9wxVariant")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6insertERKNS_8iteratorERKP9wxVariant")]
            internal static extern wxVariantList.iterator.Internal insert_0(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6insertERKNS_8iteratorEmRKP9wxVariant")]
            internal static extern void insert_1(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6insertERKNS_8iteratorENS_14const_iteratorERKS3_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, wxVariantList.const_iterator.Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList5eraseERKNS_8iteratorE")]
            internal static extern wxVariantList.iterator.Internal erase_0(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList5eraseERKNS_8iteratorES2_")]
            internal static extern wxVariantList.iterator.Internal erase_1(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6spliceERKNS_8iteratorERS_S2_S2_")]
            internal static extern void splice_0(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6spliceERKNS_8iteratorERS_")]
            internal static extern void splice_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6spliceERKNS_8iteratorERS_S2_")]
            internal static extern void splice_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList6removeERKP9wxVariant")]
            internal static extern void remove_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVariantList7reverseEv")]
            internal static extern void reverse_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVariantListixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint index);
        }

        public class value_type { }

        public class base_value_type { }

        public unsafe partial class compatibility_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22compatibility_iteratorC2EP19wxwxVariantListNode")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr ptr);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22compatibility_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList22compatibility_iteratorcvP19wxwxVariantListNodeEv")]
                internal static extern global::System.IntPtr OperatorConversion_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, compatibility_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, compatibility_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static compatibility_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new compatibility_iterator(native.ToPointer(), skipVTables);
            }

            public static compatibility_iterator __CreateInstance(compatibility_iterator.Internal native, bool skipVTables = false)
            {
                return new compatibility_iterator(native, skipVTables);
            }

            private static void* __CopyValue(compatibility_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(compatibility_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private compatibility_iterator(compatibility_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected compatibility_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public compatibility_iterator(wxwxVariantListNode ptr)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(ptr, null) ? global::System.IntPtr.Zero : ptr.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public compatibility_iterator(wxVariantList.compatibility_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((compatibility_iterator.Internal*) __Instance) = *((compatibility_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxVariantList.compatibility_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static implicit operator wxwxVariantListNode(wxVariantList.compatibility_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorConversion_0(arg0);
                wxwxVariantListNode __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
                else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList8iteratorC2EP19wxwxVariantListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList8iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList8iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList8iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList8iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator(wxwxVariantListNode node, wxwxVariantListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public iterator(wxVariantList.iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxVariantList.iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxVariantList.iterator operator ++(wxVariantList.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxVariantList.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.iterator) wxVariantList.iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxVariantList.iterator operator --(wxVariantList.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxVariantList.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.iterator) wxVariantList.iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxVariantList.iterator __op, wxVariantList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxVariantList.iterator __op, wxVariantList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxVariantListNode m_node
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxVariantListNode m_init
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList14const_iteratorC2EP19wxwxVariantListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList14const_iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList14const_iteratorC2ERKNS_8iteratorE")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList14const_iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList14const_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList14const_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator(wxwxVariantListNode node, wxwxVariantListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxVariantList.iterator it)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxVariantList.const_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxVariantList.const_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxVariantList.const_iterator operator ++(wxVariantList.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxVariantList.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.const_iterator) wxVariantList.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.const_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxVariantList.const_iterator operator --(wxVariantList.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxVariantList.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.const_iterator) wxVariantList.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.const_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxVariantList.const_iterator __op, wxVariantList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxVariantList.const_iterator __op, wxVariantList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as const_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxVariantListNode m_node
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxVariantListNode m_init
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList16reverse_iteratorC2EP19wxwxVariantListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList16reverse_iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList16reverse_iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList16reverse_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList16reverse_iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList16reverse_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList16reverse_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator(wxwxVariantListNode node, wxwxVariantListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public reverse_iterator(wxVariantList.reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((reverse_iterator.Internal*) __Instance) = *((reverse_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxVariantList.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxVariantList.reverse_iterator operator ++(wxVariantList.reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxVariantList.reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.reverse_iterator) wxVariantList.reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxVariantList.reverse_iterator operator --(wxVariantList.reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxVariantList.reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.reverse_iterator) wxVariantList.reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxVariantList.reverse_iterator __op, wxVariantList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxVariantList.reverse_iterator __op, wxVariantList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxVariantListNode m_node
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxVariantListNode m_init
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22const_reverse_iteratorC2EP19wxwxVariantListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22const_reverse_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22const_reverse_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxVariantList22const_reverse_iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList22const_reverse_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK13wxVariantList22const_reverse_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator(wxwxVariantListNode node, wxwxVariantListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxVariantList.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            }

            public const_reverse_iterator(wxVariantList.const_reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_reverse_iterator.Internal*) __Instance) = *((const_reverse_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxVariantList.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxVariantList.const_reverse_iterator operator ++(wxVariantList.const_reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxVariantList.const_reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.const_reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.const_reverse_iterator) wxVariantList.const_reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.const_reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxVariantList.const_reverse_iterator operator --(wxVariantList.const_reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxVariantList.const_reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariantList.const_reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariantList.const_reverse_iterator) wxVariantList.const_reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxVariantList.const_reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxVariantList.const_reverse_iterator __op, wxVariantList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxVariantList.const_reverse_iterator __op, wxVariantList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as const_reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxVariantListNode m_node
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxVariantListNode m_init
            {
                get
                {
                    wxwxVariantListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxVariantListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public static new wxVariantList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxVariantList(native.ToPointer(), skipVTables);
        }

        public static wxVariantList __CreateInstance(wxVariantList.Internal native, bool skipVTables = false)
        {
            return new wxVariantList(native, skipVTables);
        }

        private static void* __CopyValue(wxVariantList.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxVariantList.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxVariantList(wxVariantList.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxVariantList(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxVariantList(wxKeyType keyType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = keyType;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxVariantList");
        }

        public wxVariantList(wxVariantList list)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(list, null))
                throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
            var arg0 = list.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxVariantList");
        }

        public wxVariantList(uint n, wxVariant v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), n, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariantList");
        }

        public wxVariantList(wxVariantList.const_iterator first, wxVariantList.const_iterator last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariantList");
        }

        public wxwxVariantListNode GetFirst()
        {
            var __ret = Internal.GetFirst_0((__Instance + __PointerAdjustment));
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode GetLast()
        {
            var __ret = Internal.GetLast_0((__Instance + __PointerAdjustment));
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode Item(uint index)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), index);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode Append(wxVariant @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Append_0((__Instance + __PointerAdjustment), arg0);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode Insert(wxVariant @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Insert_0((__Instance + __PointerAdjustment), arg0);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode Insert(uint pos, wxVariant @object)
        {
            var arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Insert_1((__Instance + __PointerAdjustment), pos, arg1);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode Insert(wxwxVariantListNode prev, wxVariant @object)
        {
            var arg0 = ReferenceEquals(prev, null) ? global::System.IntPtr.Zero : prev.__Instance;
            var arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Insert_2((__Instance + __PointerAdjustment), arg0, arg1);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode Append(int key, global::System.IntPtr @object)
        {
            var arg1 = @object;
            var __ret = Internal.Append_1((__Instance + __PointerAdjustment), key, arg1);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode Append(string key, global::System.IntPtr @object)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(key);
            var arg1 = @object;
            var __ret = Internal.Append_2((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxVariantListNode DetachNode(wxwxVariantListNode node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.DetachNode_0((__Instance + __PointerAdjustment), arg0);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool DeleteNode(wxwxVariantListNode node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.DeleteNode_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool DeleteObject(wxVariant @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.DeleteObject_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Erase(wxwxVariantListNode it)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            Internal.Erase_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxwxVariantListNode Find(wxVariant @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Find_0((__Instance + __PointerAdjustment), arg0);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public virtual wxwxVariantListNode Find(wxListKey key)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___Find_1Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = ___Find_1Delegate((__Instance + __PointerAdjustment), arg0);
            wxwxVariantListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxVariantListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxVariantListNode) wxwxVariantListNode.NativeToManagedMap[__ret];
            else wxwxVariantListNode.NativeToManagedMap[__ret] = __result0 = (wxwxVariantListNode) wxwxVariantListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool Member(wxVariant @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Member_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int IndexOf(wxVariant @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.IndexOf_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Sort(wxSortCompareFunction func)
        {
            var arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Sort(wxSortFuncFor_wxVariantList func)
        {
            var arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            Internal.Sort_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override wxNodeBase CreateNode(wxNodeBase prev, wxNodeBase next, global::System.IntPtr data, wxListKey key)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___CreateNode_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(prev, null) ? global::System.IntPtr.Zero : prev.__Instance;
            var arg1 = ReferenceEquals(next, null) ? global::System.IntPtr.Zero : next.__Instance;
            var arg2 = data;
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg3 = key.__Instance;
            var __ret = ___CreateNode_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
            wxNodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxNodeBase) wxNodeBase.NativeToManagedMap[__ret];
            else wxNodeBase.NativeToManagedMap[__ret] = __result0 = (wxNodeBase) wxNodeBase.__CreateInstance(__ret);
            return __result0;
        }

        public wxVariantList.iterator begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return wxVariantList.iterator.__CreateInstance(__ret);
        }

        public wxVariantList.iterator end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return wxVariantList.iterator.__CreateInstance(__ret);
        }

        public wxVariantList.reverse_iterator rbegin()
        {
            var __ret = Internal.rbegin_0((__Instance + __PointerAdjustment));
            return wxVariantList.reverse_iterator.__CreateInstance(__ret);
        }

        public wxVariantList.reverse_iterator rend()
        {
            var __ret = Internal.rend_0((__Instance + __PointerAdjustment));
            return wxVariantList.reverse_iterator.__CreateInstance(__ret);
        }

        public void resize(uint n, wxVariant v)
        {
            var arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            Internal.resize_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxVariant front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            wxVariant __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxVariant.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxVariant) wxVariant.NativeToManagedMap[__ret];
            else wxVariant.NativeToManagedMap[__ret] = __result0 = (wxVariant) wxVariant.__CreateInstance(__ret);
            return __result0;
        }

        public wxVariant back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            wxVariant __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxVariant.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxVariant) wxVariant.NativeToManagedMap[__ret];
            else wxVariant.NativeToManagedMap[__ret] = __result0 = (wxVariant) wxVariant.__CreateInstance(__ret);
            return __result0;
        }

        public void push_front(wxVariant v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_front_0((__Instance + __PointerAdjustment), arg0);
        }

        public void pop_front()
        {
            Internal.pop_front_0((__Instance + __PointerAdjustment));
        }

        public void push_back(wxVariant v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void assign(wxVariantList.const_iterator first, wxVariantList.const_iterator last)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxVariantList.const_iterator.Internal() : *(wxVariantList.const_iterator.Internal*) (first.__Instance);
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void assign(uint n, wxVariant v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxVariantList.iterator insert(wxVariantList.iterator it, wxVariant v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            var __ret = Internal.insert_0((__Instance + __PointerAdjustment), arg0, arg1);
            return wxVariantList.iterator.__CreateInstance(__ret);
        }

        public void insert(wxVariantList.iterator it, uint n, wxVariant v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg2 = v.__Instance;
            Internal.insert_1((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public void insert(wxVariantList.iterator it, wxVariantList.const_iterator first, wxVariantList.const_iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            var arg1 = ReferenceEquals(first, null) ? new wxVariantList.const_iterator.Internal() : *(wxVariantList.const_iterator.Internal*) (first.__Instance);
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg2 = last.__Instance;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public wxVariantList.iterator erase(wxVariantList.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return wxVariantList.iterator.__CreateInstance(__ret);
        }

        public wxVariantList.iterator erase(wxVariantList.iterator first, wxVariantList.iterator last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0, arg1);
            return wxVariantList.iterator.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public void splice(wxVariantList.iterator it, wxVariantList l, wxVariantList.iterator first, wxVariantList.iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg2 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg3 = last.__Instance;
            Internal.splice_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
        }

        public void splice(wxVariantList.iterator it, wxVariantList l)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var arg1 = l.__Instance;
            Internal.splice_1((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void splice(wxVariantList.iterator it, wxVariantList l, wxVariantList.iterator first)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg2 = first.__Instance;
            Internal.splice_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void remove(wxVariant v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.remove_0((__Instance + __PointerAdjustment), arg0);
        }

        public void reverse()
        {
            Internal.reverse_0((__Instance + __PointerAdjustment));
        }

        public wxVariant this[uint index]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), index);
                wxVariant __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariant.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariant) wxVariant.NativeToManagedMap[__ret];
                else wxVariant.NativeToManagedMap[__ret] = __result0 = (wxVariant) wxVariant.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxVariant.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), index) = *(wxVariant.Internal*) value.__Instance;
            }
        }

        #region Virtual table interop

        // wxVariantList
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantList) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr _CreateNode_0DelegateInstance;

        private static global::System.IntPtr _CreateNode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr prev, global::System.IntPtr next, global::System.IntPtr data, global::System.IntPtr key)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantList) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxNodeBase __result0;
            if (prev == IntPtr.Zero) __result0 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(prev))
                __result0 = (wxNodeBase) wxNodeBase.NativeToManagedMap[prev];
            else __result0 = (wxNodeBase) wxNodeBase.__CreateInstance(prev, skipVTables: true);
            wxNodeBase __result1;
            if (next == IntPtr.Zero) __result1 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(next))
                __result1 = (wxNodeBase) wxNodeBase.NativeToManagedMap[next];
            else __result1 = (wxNodeBase) wxNodeBase.__CreateInstance(next, skipVTables: true);
            wxListKey __result3;
            if (key == IntPtr.Zero) __result3 = null;
            else if (wxListKey.NativeToManagedMap.ContainsKey(key))
                __result3 = (wxListKey) wxListKey.NativeToManagedMap[key];
            else __result3 = wxListKey.__CreateInstance(key);
            var __ret = __target.CreateNode(__result0, __result1, data, __result3);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _Find_1DelegateInstance;

        private static global::System.IntPtr _Find_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr key)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariantList) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxListKey __result0;
            if (key == IntPtr.Zero) __result0 = null;
            else if (wxListKey.NativeToManagedMap.ContainsKey(key))
                __result0 = (wxListKey) wxListKey.NativeToManagedMap[key];
            else __result0 = wxListKey.__CreateInstance(key);
            var __ret = __target.Find(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateNode_0DelegateInstance += _CreateNode_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateNode_0DelegateInstance).ToPointer();
                _Find_1DelegateInstance += _Find_1DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Find_1DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxVariant : wxObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public wxString.Internal m_name;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr variant);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EP13wxVariantDataRK8wxString")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr data, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK5wxAny")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr any);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EdRK8wxString")]
            internal static extern void ctor_4(global::System.IntPtr instance, double val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ElRK8wxString")]
            internal static extern void ctor_5(global::System.IntPtr instance, int val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EsRK8wxString")]
            internal static extern void ctor_7(global::System.IntPtr instance, short val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EbRK8wxString")]
            internal static extern void ctor_8(global::System.IntPtr instance, bool val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK10wxDateTimeRK8wxString")]
            internal static extern void ctor_9(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK8wxStringS2_")]
            internal static extern void ctor_10(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EPKcRK8wxString")]
            internal static extern void ctor_11(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK10wxCStrDataRK8wxString")]
            internal static extern void ctor_13(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK9wxUniCharRK8wxString")]
            internal static extern void ctor_18(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK12wxUniCharRefRK8wxString")]
            internal static extern void ctor_19(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EcRK8wxString")]
            internal static extern void ctor_20(global::System.IntPtr instance, sbyte val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EwRK8wxString")]
            internal static extern void ctor_21(global::System.IntPtr instance, char val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK13wxArrayStringRK8wxString")]
            internal static extern void ctor_22(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EPvRK8wxString")]
            internal static extern void ctor_23(global::System.IntPtr instance, global::System.IntPtr ptr, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2EP8wxObjectRK8wxString")]
            internal static extern void ctor_24(global::System.IntPtr instance, global::System.IntPtr ptr, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2E16wxLongLongNativeRK8wxString")]
            internal static extern void ctor_25(global::System.IntPtr instance, wxLongLongNative.Internal _0, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2E17wxULongLongNativeRK8wxString")]
            internal static extern void ctor_26(global::System.IntPtr instance, wxULongLongNative.Internal _0, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantC2ERK13wxVariantListRK8wxString")]
            internal static extern void ctor_27(global::System.IntPtr instance, global::System.IntPtr val, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr variant);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr variant);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant7SetNameERK8wxString")]
            internal static extern void SetName_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetNameEv")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant6IsNullEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsNull_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetDataEv")]
            internal static extern global::System.IntPtr GetData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant7SetDataEP13wxVariantData")]
            internal static extern void SetData_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant3RefERKS_")]
            internal static extern void Ref_0(global::System.IntPtr instance, global::System.IntPtr clone);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant7UnshareEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Unshare_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant8MakeNullEv")]
            internal static extern void MakeNull_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetTypeEv")]
            internal static extern void GetType_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant6IsTypeERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsType_0(global::System.IntPtr instance, global::System.IntPtr type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant13IsValueKindOfEPK11wxClassInfo")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValueKindOf_0(global::System.IntPtr instance, global::System.IntPtr type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant10MakeStringEv")]
            internal static extern void MakeString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant6GetAnyEv")]
            internal static extern void GetAny_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqEd")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_1(global::System.IntPtr instance, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneEd")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr instance, double value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcvdEv")]
            internal static extern double OperatorConversion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetRealEv")]
            internal static extern double GetReal_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant9GetDoubleEv")]
            internal static extern double GetDouble_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_2(global::System.IntPtr instance, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_2(global::System.IntPtr instance, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcvlEv")]
            internal static extern int OperatorConversion_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant10GetIntegerEv")]
            internal static extern int GetInteger_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetLongEv")]
            internal static extern int GetLong_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqEb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_3(global::System.IntPtr instance, bool value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneEb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_3(global::System.IntPtr instance, bool value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcvbEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorConversion_2(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetBoolEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetBool_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERK10wxDateTime")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_4(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERK10wxDateTime")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_4(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcv10wxDateTimeEv")]
            internal static extern wxDateTime.Internal OperatorConversion_3(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant11GetDateTimeEv")]
            internal static extern wxDateTime.Internal GetDateTime_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_5(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_5(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcv8wxStringEv")]
            internal static extern void OperatorConversion_4(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant9GetStringEv")]
            internal static extern void GetString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERKNSt3__112basic_stringIwNS0_11char_traitsIwEENS0_9allocatorIwEEEE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_7(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERKNSt3__112basic_stringIwNS0_11char_traitsIwEENS0_9allocatorIwEEEE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_7(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERK9wxUniChar")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_8(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERK12wxUniCharRef")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_9(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqEc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_10(global::System.IntPtr instance, sbyte value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqEw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_11(global::System.IntPtr instance, char value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERK9wxUniChar")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_8(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERK12wxUniCharRef")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_9(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneEc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_10(global::System.IntPtr instance, sbyte value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneEw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_11(global::System.IntPtr instance, char value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcv9wxUniCharEv")]
            internal static extern wxUniChar.Internal OperatorConversion_6(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcvcEv")]
            internal static extern sbyte OperatorConversion_7(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcvwEv")]
            internal static extern char OperatorConversion_8(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetCharEv")]
            internal static extern wxUniChar.Internal GetChar_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERK13wxArrayString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_12(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERK13wxArrayString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_12(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcv13wxArrayStringEv")]
            internal static extern void OperatorConversion_9(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant14GetArrayStringEv")]
            internal static extern void GetArrayString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqEPv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_13(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneEPv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_13(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcvPvEv")]
            internal static extern global::System.IntPtr OperatorConversion_10(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant10GetVoidPtrEv")]
            internal static extern global::System.IntPtr GetVoidPtr_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqEP8wxObject")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_14(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneEP8wxObject")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_14(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant14GetWxObjectPtrEv")]
            internal static extern global::System.IntPtr GetWxObjectPtr_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqE16wxLongLongNative")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_15(global::System.IntPtr instance, wxLongLongNative.Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneE16wxLongLongNative")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_15(global::System.IntPtr instance, wxLongLongNative.Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcv16wxLongLongNativeEv")]
            internal static extern wxLongLongNative.Internal OperatorConversion_11(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant11GetLongLongEv")]
            internal static extern wxLongLongNative.Internal GetLongLong_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqE17wxULongLongNative")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_16(global::System.IntPtr instance, wxULongLongNative.Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneE17wxULongLongNative")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_16(global::System.IntPtr instance, wxULongLongNative.Internal value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantcv17wxULongLongNativeEv")]
            internal static extern wxULongLongNative.Internal OperatorConversion_12(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant12GetULongLongEv")]
            internal static extern wxULongLongNative.Internal GetULongLong_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVarianteqERK13wxVariantList")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_17(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariantneERK13wxVariantList")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_17(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7GetListEv")]
            internal static extern global::System.IntPtr GetList_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant8NullListEv")]
            internal static extern void NullList_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant6AppendERKS_")]
            internal static extern void Append_0(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant6InsertERKS_")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant6MemberERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Member_0(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant6DeleteEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Delete_0(global::System.IntPtr instance, uint item);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant9ClearListEv")]
            internal static extern void ClearList_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEPl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_0(global::System.IntPtr instance, int* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEPb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_1(global::System.IntPtr instance, bool* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEPd")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_2(global::System.IntPtr instance, double* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEP8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_3(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEP9wxUniChar")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_4(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEPc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_5(global::System.IntPtr instance, sbyte* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEPw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_6(global::System.IntPtr instance, char* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEP10wxDateTime")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_7(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEP16wxLongLongNative")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_8(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEP17wxULongLongNative")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_9(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEPx")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_10(global::System.IntPtr instance, long* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxVariant7ConvertEPy")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Convert_11(global::System.IntPtr instance, ulong* value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariant14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxVariantixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_1(global::System.IntPtr instance, uint idx);
        }

        public static new wxVariant __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxVariant(native.ToPointer(), skipVTables);
        }

        public static wxVariant __CreateInstance(wxVariant.Internal native, bool skipVTables = false)
        {
            return new wxVariant(native, skipVTables);
        }

        private static void* __CopyValue(wxVariant.Internal native)
        {
            var ret = Marshal.AllocHGlobal(28);
            wxVariant.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxVariant(wxVariant.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxVariant(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxVariant()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxVariant variant)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(variant, null))
                throw new global::System.ArgumentNullException("variant", "Cannot be null because it is a C++ reference (&).");
            var arg0 = variant.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxVariantData data, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxAny any)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(any, null))
                throw new global::System.ArgumentNullException("any", "Cannot be null because it is a C++ reference (&).");
            var arg0 = any.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(double val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), val, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(int val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_5((__Instance + __PointerAdjustment), val, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(short val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_7((__Instance + __PointerAdjustment), val, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(bool val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_8((__Instance + __PointerAdjustment), val, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxDateTime val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var arg0 = val.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_9((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxString val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var arg0 = val.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_10((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(string val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(val);
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_11((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxCStrData val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var arg0 = val.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_13((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxUniChar val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var arg0 = val.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_18((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxUniCharRef val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var arg0 = val.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_19((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(sbyte val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = val;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_20((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(char val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_21((__Instance + __PointerAdjustment), val, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxArrayString val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var arg0 = val.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_22((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(global::System.IntPtr ptr, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ptr;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_23((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxObject ptr, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(ptr, null) ? global::System.IntPtr.Zero : ptr.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_24((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxLongLongNative _0, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(_0, null) ? new wxLongLongNative.Internal() : *(wxLongLongNative.Internal*) (_0.__Instance);
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_25((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxULongLongNative _0, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(_0, null) ? new wxULongLongNative.Internal() : *(wxULongLongNative.Internal*) (_0.__Instance);
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_26((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public wxVariant(wxVariantList val, wxString name)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is a C++ reference (&).");
            var arg0 = val.__Instance;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg1 = name.__Instance;
            Internal.ctor_27((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxVariant");
        }

        public static bool operator ==(wxVariant __op, wxVariant variant)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool variantNull = ReferenceEquals(variant, null);
            if (__opNull || variantNull)
                return __opNull && variantNull;
            var arg0 = __op.__Instance;
            var arg1 = variant.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxVariant;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxVariant __op, wxVariant variant)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool variantNull = ReferenceEquals(variant, null);
            if (__opNull || variantNull)
                return !(__opNull && variantNull);
            var arg0 = __op.__Instance;
            var arg1 = variant.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public void SetName(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            Internal.SetName_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxString GetName()
        {
            var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public bool IsNull()
        {
            var __ret = Internal.IsNull_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxVariantData GetData()
        {
            var __ret = Internal.GetData_0((__Instance + __PointerAdjustment));
            wxVariantData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxVariantData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxVariantData) wxVariantData.NativeToManagedMap[__ret];
            else wxVariantData.NativeToManagedMap[__ret] = __result0 = (wxVariantData) wxVariantData.__CreateInstance(__ret);
            return __result0;
        }

        public void SetData(wxVariantData data)
        {
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            Internal.SetData_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Ref(wxVariant clone)
        {
            if (ReferenceEquals(clone, null))
                throw new global::System.ArgumentNullException("clone", "Cannot be null because it is a C++ reference (&).");
            var arg0 = clone.__Instance;
            Internal.Ref_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool Unshare()
        {
            var __ret = Internal.Unshare_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void MakeNull()
        {
            Internal.MakeNull_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public wxString GetType()
        {
            var __ret = new wxString.Internal();
            Internal.GetType_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public bool IsType(wxString type)
        {
            if (ReferenceEquals(type, null))
                throw new global::System.ArgumentNullException("type", "Cannot be null because it is a C++ reference (&).");
            var arg0 = type.__Instance;
            var __ret = Internal.IsType_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsValueKindOf(wxClassInfo type)
        {
            var arg0 = ReferenceEquals(type, null) ? global::System.IntPtr.Zero : type.__Instance;
            var __ret = Internal.IsValueKindOf_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxString MakeString()
        {
            var __ret = new wxString.Internal();
            Internal.MakeString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxAny GetAny()
        {
            var __ret = new wxAny.Internal();
            Internal.GetAny_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxAny.__CreateInstance(__ret);
        }

        public static bool operator ==(wxVariant __op, double value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorEqualEqual_1(arg0, value);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, double value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaimEqual_1(arg0, value);
            return __ret;
        }

        public static implicit operator double(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_0(arg0);
            return __ret;
        }

        public double GetReal()
        {
            var __ret = Internal.GetReal_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double GetDouble()
        {
            var __ret = Internal.GetDouble_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator ==(wxVariant __op, int value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorEqualEqual_2(arg0, value);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, int value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaimEqual_2(arg0, value);
            return __ret;
        }

        public static implicit operator int(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_1(arg0);
            return __ret;
        }

        public int GetInteger()
        {
            var __ret = Internal.GetInteger_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetLong()
        {
            var __ret = Internal.GetLong_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator ==(wxVariant __op, bool value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorEqualEqual_3(arg0, value);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, bool value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaimEqual_3(arg0, value);
            return __ret;
        }

        public static implicit operator bool(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_2(arg0);
            return __ret;
        }

        public bool GetBool()
        {
            var __ret = Internal.GetBool_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator ==(wxVariant __op, wxDateTime value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_4(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxDateTime value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_4(arg0, arg1);
            return __ret;
        }

        public static implicit operator wxDateTime(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_3(arg0);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime GetDateTime()
        {
            var __ret = Internal.GetDateTime_0((__Instance + __PointerAdjustment));
            return wxDateTime.__CreateInstance(__ret);
        }

        public static bool operator ==(wxVariant __op, wxString value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_5(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxString value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_5(arg0, arg1);
            return __ret;
        }

        public static implicit operator wxString(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = new wxString.Internal();
            Internal.OperatorConversion_4(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetString()
        {
            var __ret = new wxString.Internal();
            Internal.GetString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public static bool operator ==(wxVariant __op, string value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_7(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, string value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_7(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxVariant __op, wxUniChar value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_8(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxVariant __op, wxUniCharRef value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_9(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxVariant __op, sbyte value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value;
            var __ret = Internal.OperatorEqualEqual_10(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxVariant __op, char value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorEqualEqual_11(arg0, value);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxUniChar value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_8(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxUniCharRef value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_9(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, sbyte value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value;
            var __ret = Internal.OperatorExclaimEqual_10(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, char value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaimEqual_11(arg0, value);
            return __ret;
        }

        public static implicit operator wxUniChar(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_6(arg0);
            return wxUniChar.__CreateInstance(__ret);
        }

        public static implicit operator sbyte(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_7(arg0);
            return __ret;
        }

        public static implicit operator char(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_8(arg0);
            return __ret;
        }

        public wxUniChar GetChar()
        {
            var __ret = Internal.GetChar_0((__Instance + __PointerAdjustment));
            return wxUniChar.__CreateInstance(__ret);
        }

        public static bool operator ==(wxVariant __op, wxArrayString value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_12(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxArrayString value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_12(arg0, arg1);
            return __ret;
        }

        public static implicit operator wxArrayString(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = new wxArrayString.Internal();
            Internal.OperatorConversion_9(new IntPtr(&__ret), arg0);
            return wxArrayString.__CreateInstance(__ret);
        }

        public wxArrayString GetArrayString()
        {
            var __ret = new wxArrayString.Internal();
            Internal.GetArrayString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayString.__CreateInstance(__ret);
        }

        public static bool operator ==(wxVariant __op, global::System.IntPtr value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value;
            var __ret = Internal.OperatorEqualEqual_13(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, global::System.IntPtr value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value;
            var __ret = Internal.OperatorExclaimEqual_13(arg0, arg1);
            return __ret;
        }

        public static implicit operator global::System.IntPtr(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_10(arg0);
            return __ret;
        }

        public global::System.IntPtr GetVoidPtr()
        {
            var __ret = Internal.GetVoidPtr_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator ==(wxVariant __op, wxObject value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_14(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxObject value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_14(arg0, arg1);
            return __ret;
        }

        public wxObject GetWxObjectPtr()
        {
            var __ret = Internal.GetWxObjectPtr_0((__Instance + __PointerAdjustment));
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static bool operator ==(wxVariant __op, wxLongLongNative value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = ReferenceEquals(value, null) ? new wxLongLongNative.Internal() : *(wxLongLongNative.Internal*) (value.__Instance);
            var __ret = Internal.OperatorEqualEqual_15(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxLongLongNative value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = ReferenceEquals(value, null) ? new wxLongLongNative.Internal() : *(wxLongLongNative.Internal*) (value.__Instance);
            var __ret = Internal.OperatorExclaimEqual_15(arg0, arg1);
            return __ret;
        }

        public static implicit operator wxLongLongNative(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_11(arg0);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public wxLongLongNative GetLongLong()
        {
            var __ret = Internal.GetLongLong_0((__Instance + __PointerAdjustment));
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static bool operator ==(wxVariant __op, wxULongLongNative value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = ReferenceEquals(value, null) ? new wxULongLongNative.Internal() : *(wxULongLongNative.Internal*) (value.__Instance);
            var __ret = Internal.OperatorEqualEqual_16(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxULongLongNative value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = ReferenceEquals(value, null) ? new wxULongLongNative.Internal() : *(wxULongLongNative.Internal*) (value.__Instance);
            var __ret = Internal.OperatorExclaimEqual_16(arg0, arg1);
            return __ret;
        }

        public static implicit operator wxULongLongNative(wxVariant __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_12(arg0);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public wxULongLongNative GetULongLong()
        {
            var __ret = Internal.GetULongLong_0((__Instance + __PointerAdjustment));
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static bool operator ==(wxVariant __op, wxVariantList value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return __opNull && valueNull;
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorEqualEqual_17(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxVariant __op, wxVariantList value)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool valueNull = ReferenceEquals(value, null);
            if (__opNull || valueNull)
                return !(__opNull && valueNull);
            var arg0 = __op.__Instance;
            var arg1 = value.__Instance;
            var __ret = Internal.OperatorExclaimEqual_17(arg0, arg1);
            return __ret;
        }

        public wxVariantList GetList()
        {
            var __ret = Internal.GetList_0((__Instance + __PointerAdjustment));
            wxVariantList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxVariantList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxVariantList) wxVariantList.NativeToManagedMap[__ret];
            else wxVariantList.NativeToManagedMap[__ret] = __result0 = (wxVariantList) wxVariantList.__CreateInstance(__ret);
            return __result0;
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void NullList()
        {
            Internal.NullList_0((__Instance + __PointerAdjustment));
        }

        public void Append(wxVariant value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.Append_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Insert(wxVariant value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool Member(wxVariant value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.Member_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Delete(uint item)
        {
            var __ret = Internal.Delete_0((__Instance + __PointerAdjustment), item);
            return __ret;
        }

        public void ClearList()
        {
            Internal.ClearList_0((__Instance + __PointerAdjustment));
        }

        public bool Convert(ref int value)
        {
            fixed (int* __refParamPtr0 = &value)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.Convert_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public bool Convert(ref bool value)
        {
            fixed (bool* __refParamPtr0 = &value)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.Convert_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public bool Convert(ref double value)
        {
            fixed (double* __refParamPtr0 = &value)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.Convert_2((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public bool Convert(wxString value)
        {
            var arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = Internal.Convert_3((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Convert(wxUniChar value)
        {
            var arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = Internal.Convert_4((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Convert(sbyte* value)
        {
            var arg0 = value;
            var __ret = Internal.Convert_5((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Convert(char* value)
        {
            var arg0 = value;
            var __ret = Internal.Convert_6((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Convert(wxDateTime value)
        {
            var arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = Internal.Convert_7((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Convert(wxLongLongNative value)
        {
            var arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = Internal.Convert_8((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Convert(wxULongLongNative value)
        {
            var arg0 = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            var __ret = Internal.Convert_9((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Convert(ref long value)
        {
            fixed (long* __refParamPtr0 = &value)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.Convert_10((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public bool Convert(ref ulong value)
        {
            fixed (ulong* __refParamPtr0 = &value)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.Convert_11((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected override wxRefCounter CreateRefData()
        {
            return base.CreateRefData();
        }

        protected override wxRefCounter CloneRefData(wxRefCounter data)
        {
            return base.CloneRefData(data);
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN9wxVariant12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        public wxVariant this[uint idx]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_1((__Instance + __PointerAdjustment), idx);
                wxVariant __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxVariant.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxVariant) wxVariant.NativeToManagedMap[__ret];
                else wxVariant.NativeToManagedMap[__ret] = __result0 = (wxVariant) wxVariant.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxVariant.Internal*) Internal.OperatorSubscript_1((__Instance + __PointerAdjustment), idx) = *(wxVariant.Internal*) value.__Instance;
            }
        }

        protected wxString m_name
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_name);
            }

            set
            {
                ((Internal*) __Instance)->m_name = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariant) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxVariant()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariant) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariant) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxVariant) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[4];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxAnyToVariantRegistration : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_factory;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxAnyToVariantRegistrationC2EPFP13wxVariantDataRK5wxAnyE")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr factory);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxAnyToVariantRegistrationC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxAnyToVariantRegistrationD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK26wxAnyToVariantRegistration10GetFactoryEv")]
            internal static extern global::System.IntPtr GetFactory_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAnyToVariantRegistration> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAnyToVariantRegistration>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAnyToVariantRegistration __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAnyToVariantRegistrationInternal(native.ToPointer(), skipVTables);
        }

        public static wxAnyToVariantRegistration __CreateInstance(wxAnyToVariantRegistration.Internal native, bool skipVTables = false)
        {
            return new wxAnyToVariantRegistrationInternal(native, skipVTables);
        }

        protected wxAnyToVariantRegistration(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxAnyToVariantRegistration(wxVariantDataFactory factory)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = factory == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(factory);
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxAnyToVariantRegistration");
        }

        protected wxAnyToVariantRegistration(wxAnyToVariantRegistration _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxAnyToVariantRegistration");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAnyToVariantRegistration __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract wxAnyValueType GetAssociatedType();

        public wxVariantDataFactory GetFactory()
        {
            var __ret = Internal.GetFactory_0((__Instance + __PointerAdjustment));
            var __ptr0 = __ret;
            return (wxVariantDataFactory)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(wxVariantDataFactory));
        }

        #region Virtual table interop

        // virtual ~wxAnyToVariantRegistration()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAnyToVariantRegistration) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxAnyValueType* GetAssociatedType() = 0
        private static Delegates.Func_IntPtr_IntPtr _GetAssociatedType_0DelegateInstance;

        private static global::System.IntPtr _GetAssociatedType_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAnyToVariantRegistration) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetAssociatedType();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _GetAssociatedType_0DelegateInstance += _GetAssociatedType_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetAssociatedType_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    internal unsafe partial class wxVariantDataInternal : wxVariantData, IDisposable
    {
        private static void* __CopyValue(wxVariantData.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxVariantData.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxVariantDataInternal(wxVariantData.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxVariantDataInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override bool Eq(wxVariantData data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___Eq_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(data, null))
                throw new global::System.ArgumentNullException("data", "Cannot be null because it is a C++ reference (&).");
            var arg0 = data.__Instance;
            var __ret = ___Eq_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public override wxString GetType()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___GetType_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var __ret = new wxString.Internal();
            ___GetType_0Delegate(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }
    }

    internal unsafe partial class wxAnyToVariantRegistrationInternal : wxAnyToVariantRegistration, IDisposable
    {
        private static void* __CopyValue(wxAnyToVariantRegistration.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxAnyToVariantRegistration.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxAnyToVariantRegistrationInternal(wxAnyToVariantRegistration.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxAnyToVariantRegistrationInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override wxAnyValueType GetAssociatedType()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___GetAssociatedType_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetAssociatedType_0Delegate((__Instance + __PointerAdjustment));
            wxAnyValueType __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxAnyValueType.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxAnyValueType) wxAnyValueType.NativeToManagedMap[__ret];
            else wxAnyValueType.NativeToManagedMap[__ret] = __result0 = (wxAnyValueType) wxAnyValueType.__CreateInstance(__ret);
            return __result0;
        }
    }
}
