//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxVersionInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal m_name;

            [FieldOffset(20)]
            public wxString.Internal m_description;

            [FieldOffset(40)]
            public wxString.Internal m_copyright;

            [FieldOffset(60)]
            public int m_major;

            [FieldOffset(64)]
            public int m_minor;

            [FieldOffset(68)]
            public int m_micro;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVersionInfoC2ERK8wxStringiiiS2_S2_")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr name, int major, int minor, int micro, global::System.IntPtr description, global::System.IntPtr copyright);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVersionInfoC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxVersionInfoD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo7GetNameEv")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo8GetMajorEv")]
            internal static extern int GetMajor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo8GetMinorEv")]
            internal static extern int GetMinor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo8GetMicroEv")]
            internal static extern int GetMicro_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo8ToStringEv")]
            internal static extern void ToString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo16GetVersionStringEv")]
            internal static extern void GetVersionString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo14HasDescriptionEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasDescription_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo14GetDescriptionEv")]
            internal static extern global::System.IntPtr GetDescription_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo12HasCopyrightEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasCopyright_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxVersionInfo12GetCopyrightEv")]
            internal static extern global::System.IntPtr GetCopyright_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxVersionInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxVersionInfo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxVersionInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxVersionInfo(native.ToPointer(), skipVTables);
        }

        public static wxVersionInfo __CreateInstance(wxVersionInfo.Internal native, bool skipVTables = false)
        {
            return new wxVersionInfo(native, skipVTables);
        }

        private static void* __CopyValue(wxVersionInfo.Internal native)
        {
            var ret = Marshal.AllocHGlobal(72);
            wxVersionInfo.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxVersionInfo(wxVersionInfo.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxVersionInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxVersionInfo(wxString name, int major, int minor, int micro, wxString description, wxString copyright)
        {
            __Instance = Marshal.AllocHGlobal(72);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            if (ReferenceEquals(description, null))
                throw new global::System.ArgumentNullException("description", "Cannot be null because it is a C++ reference (&).");
            var arg4 = description.__Instance;
            if (ReferenceEquals(copyright, null))
                throw new global::System.ArgumentNullException("copyright", "Cannot be null because it is a C++ reference (&).");
            var arg5 = copyright.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, major, minor, micro, arg4, arg5);
        }

        public wxVersionInfo(wxVersionInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(72);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxVersionInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString GetName()
        {
            var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public int GetMajor()
        {
            var __ret = Internal.GetMajor_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetMinor()
        {
            var __ret = Internal.GetMinor_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetMicro()
        {
            var __ret = Internal.GetMicro_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString ToString()
        {
            var __ret = new wxString.Internal();
            Internal.ToString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetVersionString()
        {
            var __ret = new wxString.Internal();
            Internal.GetVersionString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public bool HasDescription()
        {
            var __ret = Internal.HasDescription_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetDescription()
        {
            var __ret = Internal.GetDescription_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public bool HasCopyright()
        {
            var __ret = Internal.HasCopyright_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetCopyright()
        {
            var __ret = Internal.GetCopyright_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }
    }
}
