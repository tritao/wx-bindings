//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxWindowIDRef : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int m_id;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWindowIDRefC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWindowIDRefC2Ei")]
            internal static extern void ctor_1(global::System.IntPtr instance, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWindowIDRefC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWindowIDRefD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxWindowIDRef8GetValueEv")]
            internal static extern int GetValue_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxWindowIDRefcviEv")]
            internal static extern int OperatorConversion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK13wxWindowIDRefS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr lhs, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK13wxWindowIDRefi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_1(global::System.IntPtr lhs, int rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqiRK13wxWindowIDRef")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_3(int lhs, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK13wxWindowIDRefS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr lhs, global::System.IntPtr rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK13wxWindowIDRefi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr lhs, int rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneiRK13wxWindowIDRef")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_3(int lhs, global::System.IntPtr rhs);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxWindowIDRef> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxWindowIDRef>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxWindowIDRef __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxWindowIDRef(native.ToPointer(), skipVTables);
        }

        public static wxWindowIDRef __CreateInstance(wxWindowIDRef.Internal native, bool skipVTables = false)
        {
            return new wxWindowIDRef(native, skipVTables);
        }

        private static void* __CopyValue(wxWindowIDRef.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxWindowIDRef.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxWindowIDRef(wxWindowIDRef.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxWindowIDRef(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxWindowIDRef()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxWindowIDRef(int id)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), id);
        }

        public wxWindowIDRef(wxWindowIDRef id)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(id, null))
                throw new global::System.ArgumentNullException("id", "Cannot be null because it is a C++ reference (&).");
            var arg0 = id.__Instance;
            Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxWindowIDRef __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int GetValue()
        {
            var __ret = Internal.GetValue_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static implicit operator int(wxWindowIDRef __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_0(arg0);
            return __ret;
        }

        public static bool operator ==(wxWindowIDRef lhs, wxWindowIDRef rhs)
        {
            bool lhsNull = ReferenceEquals(lhs, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (lhsNull || rhsNull)
                return lhsNull && rhsNull;
            var arg0 = lhs.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxWindowIDRef;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator ==(wxWindowIDRef lhs, int rhs)
        {
            bool lhsNull = ReferenceEquals(lhs, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (lhsNull || rhsNull)
                return lhsNull && rhsNull;
            var arg0 = lhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_1(arg0, rhs);
            return __ret;
        }

        public static bool operator ==(int lhs, wxWindowIDRef rhs)
        {
            bool lhsNull = ReferenceEquals(lhs, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (lhsNull || rhsNull)
                return lhsNull && rhsNull;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorEqualEqual_3(lhs, arg1);
            return __ret;
        }

        public static bool operator !=(wxWindowIDRef lhs, wxWindowIDRef rhs)
        {
            bool lhsNull = ReferenceEquals(lhs, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (lhsNull || rhsNull)
                return !(lhsNull && rhsNull);
            var arg0 = lhs.__Instance;
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxWindowIDRef lhs, int rhs)
        {
            bool lhsNull = ReferenceEquals(lhs, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (lhsNull || rhsNull)
                return !(lhsNull && rhsNull);
            var arg0 = lhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_1(arg0, rhs);
            return __ret;
        }

        public static bool operator !=(int lhs, wxWindowIDRef rhs)
        {
            bool lhsNull = ReferenceEquals(lhs, null);
            bool rhsNull = ReferenceEquals(rhs, null);
            if (lhsNull || rhsNull)
                return !(lhsNull && rhsNull);
            var arg1 = rhs.__Instance;
            var __ret = Internal.OperatorExclaimEqual_3(lhs, arg1);
            return __ret;
        }
    }

    public unsafe partial class wxIdManager : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdManagerC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdManager9ReserveIdEi")]
            internal static extern int ReserveId_0(int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdManager11UnreserveIdEii")]
            internal static extern void UnreserveId_0(int id, int count);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxIdManager> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxIdManager>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxIdManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxIdManager(native.ToPointer(), skipVTables);
        }

        public static wxIdManager __CreateInstance(wxIdManager.Internal native, bool skipVTables = false)
        {
            return new wxIdManager(native, skipVTables);
        }

        private static void* __CopyValue(wxIdManager.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxIdManager.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxIdManager(wxIdManager.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxIdManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxIdManager()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxIdManager(wxIdManager _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxIdManager.Internal*) __Instance) = *((wxIdManager.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxIdManager __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static int ReserveId(int count)
        {
            var __ret = Internal.ReserveId_0(count);
            return __ret;
        }

        public static void UnreserveId(int id, int count)
        {
            Internal.UnreserveId_0(id, count);
        }
    }
}
